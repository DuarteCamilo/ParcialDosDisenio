/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;
import ConexioDB.ConexionDB;
import Controladores.ControladorVentanaPedidoRegistro;
import Modelos.Cliente;
import Modelos.Pedido;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import otros.TextPrompt;

/**
 *
 * @author cduar
 */
public class VentanaPedidoRegistro extends javax.swing.JFrame {
    private ControladorVentanaPedidoRegistro controlador;

    /**
     * Creates new form VentanaPedidoRegistro
     */
    public VentanaPedidoRegistro() {
        initComponents();
        this.controlador = new ControladorVentanaPedidoRegistro();
        actualizarTabla();
        actualizarComboBox();
        actualizarComboBoxFiltro();
        TextPrompt pHCode = new TextPrompt("dd/mm/yyyy", txtFecha);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPedidos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btRegistar = new javax.swing.JButton();
        btEliminar = new javax.swing.JButton();
        btEditar = new javax.swing.JButton();
        btBuscar = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        txtId_pedido = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cboClientes = new javax.swing.JComboBox<>();
        cboFiltro = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Pedido", "Fecha", "Total", "Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPedidosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaPedidos);
        if (tablaPedidos.getColumnModel().getColumnCount() > 0) {
            tablaPedidos.getColumnModel().getColumn(0).setResizable(false);
            tablaPedidos.getColumnModel().getColumn(1).setResizable(false);
            tablaPedidos.getColumnModel().getColumn(2).setResizable(false);
            tablaPedidos.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Gestion Pedido"));

        btRegistar.setText("Registrar");
        btRegistar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegistarActionPerformed(evt);
            }
        });

        btEliminar.setText("Eliminar");
        btEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarActionPerformed(evt);
            }
        });

        btEditar.setText("Editar");
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        btBuscar.setText("Buscar");
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        txtTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTotalKeyTyped(evt);
            }
        });

        txtFecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFechaKeyTyped(evt);
            }
        });

        txtId_pedido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtId_pedidoKeyTyped(evt);
            }
        });

        jLabel1.setText("ID:");

        jLabel2.setText("Fecha:");

        jLabel3.setText("Total:");

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Cliente:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btBuscar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btRegistar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtId_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(cboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRegistar)
                    .addComponent(btBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btEditar)
                    .addComponent(btEliminar))
                .addGap(34, 34, 34)
                .addComponent(jButton2)
                .addContainerGap())
        );

        cboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFiltroActionPerformed(evt);
            }
        });

        jLabel5.setText("Filtrar por Cliente:");

        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btRegistarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegistarActionPerformed
        if( txtFecha.getText().isEmpty() || txtTotal.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Complete los campos de texto correctamente para guardar el pedido en la base de datos.");
            return;
        }
        if( cboClientes.getSelectedIndex()==0 || cboClientes.getSelectedItem().equals("-Seleccionar-")){
            JOptionPane.showMessageDialog(rootPane, "Seleccione un cliente para guardar el pedido correctamente en la base de datos ");
            return;
        }
        
        try{
            
            String fecha_pedido = txtFecha.getText();
            float total = Float.valueOf(txtTotal.getText());
            
            String cliente1 = cboClientes.getSelectedItem().toString();
            String[] clientediv = cliente1.split("-",2);
            int cliente_id = Integer.parseInt(clientediv[0]);
            
            Pedido pedido = new Pedido(fecha_pedido, total, cliente_id);
            boolean respuesta = controlador.agregarPedido(pedido);
            if(respuesta){
                LimpiarCampos();
                actualizarTabla();
                
            }
                
            
            
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_btRegistarActionPerformed

    private void btEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminarActionPerformed
        if(txtId_pedido.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Escriba un id en el campo de texto para buscarlo correctamente.");
            return;
        }
        
        try{
            int pedido_id = Integer.parseInt(txtId_pedido.getText());
            controlador.eliminarPedido(pedido_id);
            LimpiarCampos();
            actualizarTabla();
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_btEliminarActionPerformed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        if(txtId_pedido.getText().isEmpty() || txtFecha.getText().isEmpty() || txtTotal.getText().isEmpty()  ){
            JOptionPane.showMessageDialog(rootPane, "Complete los campos de texto correctamente para guardar el libro en la base de datos.");
            return;
        }
        if( cboClientes.getSelectedIndex()==0 || cboClientes.getSelectedItem().equals("-Seleccionar-")){
            JOptionPane.showMessageDialog(rootPane, "Seleccione un cliente para guardar el pedido correctamente en la base de datos ");
            return;
        }
        
        try{
            int pedido_id = Integer.parseInt(txtId_pedido.getText());
            String fecha_pedido = txtFecha.getText();
            float total = Float.valueOf(txtTotal.getText());
            
            String cliente1 = cboClientes.getSelectedItem().toString();
            String[] clientediv = cliente1.split("-",2);
            int cliente_id = Integer.parseInt(clientediv[0]);
            
            Pedido pedido = new Pedido(pedido_id,fecha_pedido, total, cliente_id);
            boolean respuesta = controlador.editarPedido(pedido);
            if(respuesta){
                LimpiarCampos();
                actualizarTabla();   
            }else{
                txtId_pedido.setText("");
            }
            
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_btEditarActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        if ( txtId_pedido.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Escriba un número de ID  para buscar en la base de datos");
            return;
        }
        String pedido_id = txtId_pedido.getText();
        boolean encontrado = false;
        try {
            int filas = tablaPedidos.getRowCount();
            
            for (int i = 0; i < filas; i++) {
                Object valor = tablaPedidos.getValueAt(i, 0);
                if (pedido_id.equals(valor.toString())) {
                    String fecha_pedido = tablaPedidos.getValueAt(i, 1).toString();
                    String total = tablaPedidos.getValueAt(i, 2).toString();

                    txtFecha.setText(fecha_pedido);
                    txtTotal.setText(total);
                    txtId_pedido.setEditable(false);
                    String x = tablaPedidos.getValueAt(i, 3).toString(); 
                    cboClientes.setSelectedItem(x);
                    
                    
                    encontrado = true;
                    
                    break;
                }
            }
        } catch (Exception e) {
        }

        if (!encontrado) {
            LimpiarCampos();
            JOptionPane.showMessageDialog(rootPane, "No se encontró ninguna coincidencia");
        }
    }//GEN-LAST:event_btBuscarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        LimpiarCampos();
        actualizarTabla();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Inicio i = new Inicio();
        i.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFiltroActionPerformed
        Object selectedItem = cboFiltro.getSelectedItem();
        if (selectedItem != null && selectedItem.toString().equals("-Seleccionar-")) {
            actualizarTabla();
        }else{
            String X = cboFiltro.getSelectedItem().toString();
            String[] catediv = X.split("-",2);
            int cliente_id = Integer.parseInt(catediv[0]);
            String nombre = catediv[1];
        
            actualizarTablaFiltro(cliente_id , nombre);
        }
    }//GEN-LAST:event_cboFiltroActionPerformed

    private void tablaPedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPedidosMouseClicked
        int row = tablaPedidos.getSelectedRow();
        txtId_pedido.setText(tablaPedidos.getValueAt(row,0).toString());
        txtId_pedido.setEditable(false);
        int pedido_id = Integer.parseInt(txtId_pedido.getText());
        
        Pedido pedido = controlador.buscarPedido(pedido_id);
        
        txtFecha.setText(String.valueOf(pedido.getFecha_pedido()));
        txtTotal.setText(String.valueOf(pedido.getTotal()));
        
        String nombre_str = tablaPedidos.getValueAt(row,3).toString();
        
        cboClientes.setSelectedItem(nombre_str);
        
    }//GEN-LAST:event_tablaPedidosMouseClicked

    private void txtId_pedidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtId_pedidoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c) || Character.isWhitespace(c) || (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE )) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingresar solo numeros"); 
        }else if (txtId_pedido.getText().length() >= 10 && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Máximo 10 caracteres permitidos");
        }
    }//GEN-LAST:event_txtId_pedidoKeyTyped

    private void txtTotalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c) || Character.isWhitespace(c) || (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE )) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingresar solo numeros"); 
        }else if (txtTotal.getText().length() >= 20 && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Máximo 20 caracteres permitidos");
        }
    }//GEN-LAST:event_txtTotalKeyTyped

    private void txtFechaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '/' && c != KeyEvent.VK_BACK_SPACE) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo se permiten números y '/'");
        } else if (txtFecha.getText().length() >= 10 && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Máximo 10 caracteres permitidos");
        }

    }//GEN-LAST:event_txtFechaKeyTyped

    public void LimpiarCampos(){
        String t = "";
        txtId_pedido.setText(t);
        txtId_pedido.setEditable(true);
        txtTotal.setText(t);
        txtFecha.setText(t);
        cboClientes.setSelectedItem("-Seleccionar-");
    }
    
    public void actualizarTabla(){
        DefaultTableModel modelo = new  DefaultTableModel();
        tablaPedidos.setModel(modelo);   
        try{
                for (int i = 0; i < 3 ; i++) {
                    for (int j = 0; j < modelo.getRowCount(); j++) {
                        modelo.removeRow(j);
                    }
                }
            }catch(NullPointerException e){
            }
            try{


                PreparedStatement ps = null;
                ResultSet rs = null;
                java.sql.Connection conn = ConexionDB.getINSTANCE().getConnection();

                String sql = "SELECT P.pedido_id, P.fecha_pedido, P.total,  C.cliente_id||'-'||C.nombre FROM pedidos AS P INNER JOIN clientes AS C ON P.cliente_id = C.cliente_id;";                    
                ps = conn.prepareStatement(sql);
                rs = ps.executeQuery();


                ResultSetMetaData rsMd = (ResultSetMetaData) rs.getMetaData();

                int cantidadColumnas = rsMd.getColumnCount();

                modelo.addColumn("ID");
                modelo.addColumn("Fecha");
                modelo.addColumn("total");
                modelo.addColumn("Cliente");
              
                int anchos[] = {70, 70, 70, 150  };
                for (int i = 0; i < tablaPedidos.getColumnCount(); i++) {
                    tablaPedidos.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);                
                }

                while(rs.next()){
                    Object[] filas = new Object[cantidadColumnas];
                    for (int i = 0; i < cantidadColumnas; i++) {
                        filas[i] = rs.getObject(i + 1);
                    }
                    modelo.addRow(filas);
                }
                

            }catch(SQLException ex){
                System.err.println(ex.toString());
            }
        
    }
    private void actualizarTablaFiltro(int cliente_id , String nombre) {
        DefaultTableModel modelo = new  DefaultTableModel();
        tablaPedidos.setModel(modelo);
        
        modelo.addColumn("ID");
        modelo.addColumn("Fecha");
        modelo.addColumn("total");
        modelo.addColumn("Cliente");
        
        try{
            for (int i = 0; i < 3 ; i++) {
                for (int j = 0; j < modelo.getRowCount(); j++) {
                    modelo.removeRow(j);
                }
            }
        }catch(NullPointerException e){
        }
        try{
            ArrayList<Pedido> listaPedidos = controlador.filtrarPedidos(cliente_id);

            for (int i = 0; i < listaPedidos.size() ; i++) {
                Pedido aux = listaPedidos.get(i);
               
                    Object[] ob = {aux.getPedido_id(), aux.getFecha_pedido(), aux.getTotal(), String.valueOf(cliente_id)+"-"+nombre };
                    modelo.addRow(ob);
                
                }
        }catch( SQLException ex){        
        }
    }
    
    public void actualizarComboBox() {
        cboClientes.removeAllItems();
        ArrayList<String> lista_str = new ArrayList<>();

        try {
            ArrayList<Cliente> listaClientes = controlador.traerClientes();
            for (int i = 0; i < listaClientes.size(); i++) {
                Cliente cliente = listaClientes.get(i);
                int cliente_id = cliente.getCliente_id();
                String nombre = cliente.getNombre();
                lista_str.add(cliente_id + "-" + nombre);
            }

//            Collections.sort(lista_str, (a, b) -> {
//                int idA = Integer.parseInt(a.split("-")[0]);
//                int idB = Integer.parseInt(b.split("-")[0]);
//                return Integer.compare(idA, idB);
//            });

            cboClientes.addItem("-Seleccionar-");
            for (int i = 0; i < lista_str.size(); i++) {
                String item = lista_str.get(i);
                cboClientes.addItem(item);
            }
            

        } catch (Exception e) {
        }
    }
    
    public void actualizarComboBoxFiltro() {
        cboFiltro.removeAllItems();
        ArrayList<String> lista_str = new ArrayList<>();

        try {
            ArrayList<Cliente> listaClientes = controlador.traerClientes();
            for (int i = 0; i < listaClientes.size(); i++) {
                Cliente cliente = listaClientes.get(i);
                int cliente_id = cliente.getCliente_id();
                String nombre = cliente.getNombre();
                lista_str.add(cliente_id + "-" + nombre);
            }

//            Collections.sort(lista_str, (a, b) -> {
//                int idA = Integer.parseInt(a.split("-")[0]);
//                int idB = Integer.parseInt(b.split("-")[0]);
//                return Integer.compare(idA, idB);
//            });

            cboFiltro.addItem("-Seleccionar-");
            for (int i = 0; i < lista_str.size(); i++) {
                String item = lista_str.get(i);
                cboFiltro.addItem(item);
            }
            

        } catch (Exception e) {
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPedidoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPedidoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPedidoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPedidoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPedidoRegistro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btEliminar;
    private javax.swing.JButton btRegistar;
    private javax.swing.JComboBox<String> cboClientes;
    private javax.swing.JComboBox<String> cboFiltro;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPedidos;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtId_pedido;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
